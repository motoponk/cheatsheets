{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Welcome to My Quick Reference Cheatsheets My favorite development tools CommandLine Tools Babun - a Windows shell you will love!. iTerms2 - iTerm2 is a replacement for Terminal that works on Macs with macOS 10.8 or newer. Oh-My-Zsh - Your terminal never felt this good before. SdkMan - The Software Development Kit Manager. Java Libraries JUnit 5 Docs REST Assured Mock Server TestContainers IDE Intellij IDEA Spring Tool Suite NetBeans Android Studio Visual Studio Code Atom Sublime Text Task Tracking Tools Asana EverNote Trello Utilities Postman - REST Client Insomina - REST client Bitwarden - Password Manager SimpleMind - Mind Mapping tool GIF Brewery - Create GIFs Rambox - Messaging and emailing app that combines common web applications into one. Static Site Generators Hugo Jekyll MkDocs DevOps Docker Docker Compose Vagrant - Development Environments Made Easy Ansible - AUTOMATION FOR EVERYONE Jenkins - Build great things at any scale Jenkinx-X - Jenkins X is a CI/CD solution for modern cloud applications on Kubernetes Kubernetes - Automating deployment, scaling, and management of containerized applications. Helm - The package manager for Kubernetes","title":"Home"},{"location":"#home","text":"Welcome to My Quick Reference Cheatsheets","title":"Home"},{"location":"#my-favorite-development-tools","text":"","title":"My favorite development tools"},{"location":"#commandline-tools","text":"Babun - a Windows shell you will love!. iTerms2 - iTerm2 is a replacement for Terminal that works on Macs with macOS 10.8 or newer. Oh-My-Zsh - Your terminal never felt this good before. SdkMan - The Software Development Kit Manager.","title":"CommandLine Tools"},{"location":"#java-libraries","text":"JUnit 5 Docs REST Assured Mock Server TestContainers","title":"Java Libraries"},{"location":"#ide","text":"Intellij IDEA Spring Tool Suite NetBeans Android Studio Visual Studio Code Atom Sublime Text","title":"IDE"},{"location":"#task-tracking-tools","text":"Asana EverNote Trello","title":"Task Tracking Tools"},{"location":"#utilities","text":"Postman - REST Client Insomina - REST client Bitwarden - Password Manager SimpleMind - Mind Mapping tool GIF Brewery - Create GIFs Rambox - Messaging and emailing app that combines common web applications into one.","title":"Utilities"},{"location":"#static-site-generators","text":"Hugo Jekyll MkDocs","title":"Static Site Generators"},{"location":"#devops","text":"Docker Docker Compose Vagrant - Development Environments Made Easy Ansible - AUTOMATION FOR EVERYONE Jenkins - Build great things at any scale Jenkinx-X - Jenkins X is a CI/CD solution for modern cloud applications on Kubernetes Kubernetes - Automating deployment, scaling, and management of containerized applications. Helm - The package manager for Kubernetes","title":"DevOps"},{"location":"ansible/","text":"Installation Instructions: http://docs.ansible.com/ansible/latest/intro_installation.html Ubuntu sudo apt-get install software-properties-common sudo apt-add-repository ppa:ansible/ansible sudo apt-get update sudo apt-get install ansible MacOS sudo easy_install pip sudo pip install ansible Getting Started ansible --version","title":"Ansible"},{"location":"ansible/#installation","text":"Instructions: http://docs.ansible.com/ansible/latest/intro_installation.html","title":"Installation"},{"location":"ansible/#ubuntu","text":"sudo apt-get install software-properties-common sudo apt-add-repository ppa:ansible/ansible sudo apt-get update sudo apt-get install ansible","title":"Ubuntu"},{"location":"ansible/#macos","text":"sudo easy_install pip sudo pip install ansible","title":"MacOS"},{"location":"ansible/#getting-started","text":"ansible --version","title":"Getting Started"},{"location":"docker/","text":"Docker Commands Docker basics Start a container in interactive attached mode: docker run -i -t ubuntu:16.04 /bin/bash Detach from a container: Ctrl + P Ctrl + Q Start a container in detached mode: docker run -d ubuntu:16.04 /bin/bash View logs of a container: docker logs ContainerId Start/Stop/Pause/Restart a container: docker start ContainerID docker stop ContainerID docker restart ContainerID docker pause ContainerID docker unpause ContainerID List running containers: docker ps List all containers: docker ps -a List only container ids: docker ps -aq List container ids not running: docker ps -aq -f status=exited Delete a container: docker rm containerId Delete all stopped containers: docker rm $(docker ps -aq status=exited) docker container prune Automatically remove container once stopped: docker run -i -t --rm ubuntu:16.04 /bin/bash Commit changes in a docker container: docker commit ContainerID username/repository Create Docker Image Build an image using Dockerfile: docker build -t sivaprasadreddy/myapp:1.0 . Build an image using different Dockerfile name: docker build -t busyboxplus:1.0 -f ./myfolder/MyDockerFile View layers of a container: docker history ContainerId Sample Dockerfile # A basic apache server. To use either add or bind mount content under /var/www FROM ubuntu:12.04 LABEL maintainer= siva@mail.com RUN apt-get update apt-get install -y apache2 \\ apt-get clean rm -rf /var/lib/apt/lists/* ENV APACHE_RUN_USER www-data ENV APACHE_RUN_GROUP www-data ENV APACHE_LOG_DIR /var/log/apache2 EXPOSE 80 CMD [ /usr/sbin/apache2 , -D , FOREGROUND ] Docker Instructions FROM : The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions. FROM image [: tag |@ digest ] FROM ubuntu:latest COPY : The COPY instruction copies new files or directories from src and adds them to the filesystem of the container at the path dest . COPY src ... dst COPY html /var/www/html COPY httpd.conf magic /etc/httpd/conf/ ADD : The ADD instruction copies new files, directories or remote file URLs from src and adds them to the filesystem of the image at the path dest . ADD src ... dst ADD web-page-config.tar / ENV : The ENV instruction sets the environment variable key to the value value . ENV key value ENV DEBUG_LVL 3 ENV APACHE_LOG_DIR /var/log/apache WORKDIR : The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile. If the WORKDIR doesn\u2019t exist, it will be created even if it\u2019s not used in any subsequent Dockerfile instruction. WORKDIR dirpath WORKDIR /var/log EXPOSE : The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime. EXPOSE port [/ proto ] [ port [/ proto ]...] EXPOSE 8080 8787 LABEL : The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. LABEL key-1 = val-1 key-2 = val-2 ... key-n = val-n LABEL version=\"2.0\" release-date=\"2016-08-05\" RUN The RUN command executes during build time. RUN command (or) RUN [\" exec \", \" arg-1 \", ..., \" arg-n \"] RUN echo \"echo Welcome to Docker!\" /root/.bashrc RUN [\"bash\", \"-c\", \"rm\", \"-rf\", \"/tmp/abc\"] CMD : The CMD is to provide defaults for an executing container and runs when container starts. There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect. CMD command (or) CMD [\" exec \", \" arg-1 \", ..., \" arg-n \"] (or) CMD [\" arg-1 \", ..., \" arg-n \"] //Dockerfile to demonstrate the behavior of CMD FROM busybox:latest MAINTAINER Siva sivaprasadreddy.k@gmail.com CMD [ echo , Dockerfile CMD demo ] docker build -t cmd-demo . sudo docker run cmd-demo Output : Dockerfile CMD demo sudo docker run cmd-demo echo Override CMD demo Output : Override CMD demo ENTRYPOINT : An ENTRYPOINT allows you to configure a container that will run as an executable. ENTRYPOINT command (or) ENTRYPOINT [\" exec \", \" arg-1 \", ..., \" arg-n \"] Only the last ENTRYPOINT instruction will be effective. //Dockerfile to demonstrate the behavior of ENTRYPOINT FROM busybox:latest ENTRYPOINT [ echo , Dockerfile ENTRYPOINT demo ] sudo docker build -t entrypoint-demo . sudo docker run entrypoint-demo Output : Dockerfile ENTRYPOINT demo sudo docker run entrypoint-demo with additional arguments Output : Dockerfile ENTRYPOINT demo with additional arguments sudo docker run -it --entrypoint=\"/bin/sh\" entrypoint-demo Output : /# HEALTHCHECK : The HEALTHCHECK instruction tells Docker how to test a container to check that it is still working. HEALTHCHECK [ options ] CMD command Only the last HEALTHCHECK instruction will take effect. HEALTHCHECK --interval=5m --timeout=3s CMD curl -f http://localhost/ || exit 1 Push image to DockerHub $ docker images -a $ docker login Username: sivaprasadreddy Password: my_password docker push sivaprasadreddy/myapp Delete Image docker rmi sivaprasadreddy/myapp Docker cleanup Delete volumes docker volume rm $(docker volume ls -qf dangling=true) docker volume ls -qf dangling=true | xargs -r docker volume rm Delete networks docker network ls docker network ls | grep \"bridge\" docker network rm $(docker network ls | grep \"bridge\" | awk '/ / { print $1 }') docker network prune Remove docker images docker images docker rmi $(docker images -q) //delete all images docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc) docker images | grep \"none\" docker rmi $(docker images | grep \"none\" | awk '/ / { print $3 }') Remove docker containers docker ps -a docker kill $(docker ps -q) docker rm $(docker ps -qa --no-trunc --filter \"status=exited\") Docker System Prune $ docker system prune -a WARNING! This will remove: - all stopped containers - all volumes not used by at least one container - all networks not used by at least one container - all images without at least one container associated to them Are you sure you want to continue? [y/N] y Resize disk space for docker vm docker-machine create --driver virtualbox --virtualbox-disk-size \"40000\" default","title":"Docker"},{"location":"docker/#docker-commands","text":"","title":"Docker Commands"},{"location":"docker/#docker-basics","text":"Start a container in interactive attached mode: docker run -i -t ubuntu:16.04 /bin/bash Detach from a container: Ctrl + P Ctrl + Q Start a container in detached mode: docker run -d ubuntu:16.04 /bin/bash View logs of a container: docker logs ContainerId Start/Stop/Pause/Restart a container: docker start ContainerID docker stop ContainerID docker restart ContainerID docker pause ContainerID docker unpause ContainerID List running containers: docker ps List all containers: docker ps -a List only container ids: docker ps -aq List container ids not running: docker ps -aq -f status=exited Delete a container: docker rm containerId Delete all stopped containers: docker rm $(docker ps -aq status=exited) docker container prune Automatically remove container once stopped: docker run -i -t --rm ubuntu:16.04 /bin/bash Commit changes in a docker container: docker commit ContainerID username/repository","title":"Docker basics"},{"location":"docker/#create-docker-image","text":"Build an image using Dockerfile: docker build -t sivaprasadreddy/myapp:1.0 . Build an image using different Dockerfile name: docker build -t busyboxplus:1.0 -f ./myfolder/MyDockerFile View layers of a container: docker history ContainerId Sample Dockerfile # A basic apache server. To use either add or bind mount content under /var/www FROM ubuntu:12.04 LABEL maintainer= siva@mail.com RUN apt-get update apt-get install -y apache2 \\ apt-get clean rm -rf /var/lib/apt/lists/* ENV APACHE_RUN_USER www-data ENV APACHE_RUN_GROUP www-data ENV APACHE_LOG_DIR /var/log/apache2 EXPOSE 80 CMD [ /usr/sbin/apache2 , -D , FOREGROUND ]","title":"Create Docker Image"},{"location":"docker/#docker-instructions","text":"FROM : The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions. FROM image [: tag |@ digest ] FROM ubuntu:latest COPY : The COPY instruction copies new files or directories from src and adds them to the filesystem of the container at the path dest . COPY src ... dst COPY html /var/www/html COPY httpd.conf magic /etc/httpd/conf/ ADD : The ADD instruction copies new files, directories or remote file URLs from src and adds them to the filesystem of the image at the path dest . ADD src ... dst ADD web-page-config.tar / ENV : The ENV instruction sets the environment variable key to the value value . ENV key value ENV DEBUG_LVL 3 ENV APACHE_LOG_DIR /var/log/apache WORKDIR : The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile. If the WORKDIR doesn\u2019t exist, it will be created even if it\u2019s not used in any subsequent Dockerfile instruction. WORKDIR dirpath WORKDIR /var/log EXPOSE : The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime. EXPOSE port [/ proto ] [ port [/ proto ]...] EXPOSE 8080 8787 LABEL : The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. LABEL key-1 = val-1 key-2 = val-2 ... key-n = val-n LABEL version=\"2.0\" release-date=\"2016-08-05\" RUN The RUN command executes during build time. RUN command (or) RUN [\" exec \", \" arg-1 \", ..., \" arg-n \"] RUN echo \"echo Welcome to Docker!\" /root/.bashrc RUN [\"bash\", \"-c\", \"rm\", \"-rf\", \"/tmp/abc\"] CMD : The CMD is to provide defaults for an executing container and runs when container starts. There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect. CMD command (or) CMD [\" exec \", \" arg-1 \", ..., \" arg-n \"] (or) CMD [\" arg-1 \", ..., \" arg-n \"] //Dockerfile to demonstrate the behavior of CMD FROM busybox:latest MAINTAINER Siva sivaprasadreddy.k@gmail.com CMD [ echo , Dockerfile CMD demo ] docker build -t cmd-demo . sudo docker run cmd-demo Output : Dockerfile CMD demo sudo docker run cmd-demo echo Override CMD demo Output : Override CMD demo ENTRYPOINT : An ENTRYPOINT allows you to configure a container that will run as an executable. ENTRYPOINT command (or) ENTRYPOINT [\" exec \", \" arg-1 \", ..., \" arg-n \"] Only the last ENTRYPOINT instruction will be effective. //Dockerfile to demonstrate the behavior of ENTRYPOINT FROM busybox:latest ENTRYPOINT [ echo , Dockerfile ENTRYPOINT demo ] sudo docker build -t entrypoint-demo . sudo docker run entrypoint-demo Output : Dockerfile ENTRYPOINT demo sudo docker run entrypoint-demo with additional arguments Output : Dockerfile ENTRYPOINT demo with additional arguments sudo docker run -it --entrypoint=\"/bin/sh\" entrypoint-demo Output : /# HEALTHCHECK : The HEALTHCHECK instruction tells Docker how to test a container to check that it is still working. HEALTHCHECK [ options ] CMD command Only the last HEALTHCHECK instruction will take effect. HEALTHCHECK --interval=5m --timeout=3s CMD curl -f http://localhost/ || exit 1 Push image to DockerHub $ docker images -a $ docker login Username: sivaprasadreddy Password: my_password docker push sivaprasadreddy/myapp Delete Image docker rmi sivaprasadreddy/myapp","title":"Docker Instructions"},{"location":"docker/#docker-cleanup","text":"Delete volumes docker volume rm $(docker volume ls -qf dangling=true) docker volume ls -qf dangling=true | xargs -r docker volume rm Delete networks docker network ls docker network ls | grep \"bridge\" docker network rm $(docker network ls | grep \"bridge\" | awk '/ / { print $1 }') docker network prune Remove docker images docker images docker rmi $(docker images -q) //delete all images docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc) docker images | grep \"none\" docker rmi $(docker images | grep \"none\" | awk '/ / { print $3 }') Remove docker containers docker ps -a docker kill $(docker ps -q) docker rm $(docker ps -qa --no-trunc --filter \"status=exited\") Docker System Prune $ docker system prune -a WARNING! This will remove: - all stopped containers - all volumes not used by at least one container - all networks not used by at least one container - all images without at least one container associated to them Are you sure you want to continue? [y/N] y Resize disk space for docker vm docker-machine create --driver virtualbox --virtualbox-disk-size \"40000\" default","title":"Docker cleanup"},{"location":"learning/","text":"Learning General Programming Structure and Interpretation of Computer Programs Data Structures and Algorithms Algorithmic Thinking, Peak Finding Video Kotlin https://github.com/KotlinBy/awesome-kotlin http://www.kotlintoday.com/","title":"Learning"},{"location":"learning/#learning","text":"","title":"Learning"},{"location":"learning/#general-programming","text":"Structure and Interpretation of Computer Programs","title":"General Programming"},{"location":"learning/#data-structures-and-algorithms","text":"Algorithmic Thinking, Peak Finding Video","title":"Data Structures and Algorithms"},{"location":"learning/#kotlin","text":"https://github.com/KotlinBy/awesome-kotlin http://www.kotlintoday.com/","title":"Kotlin"},{"location":"linux/","text":"Linux Commands The default prompt for regular user is $ and for root user is # Ex: [siva@siva-mint ~]$ [siva@siva-mint ~]# How to determine whether a given Linux is 32 bit or 64 bit? $ uname -m x86_64 == 64-bit kernel i686 == 32-bit kernel Show distribution info: $ uname -a Linux localhost.localdomain 4.5.7-300.fc24.x86_64 #1 SMP Wed Jun 8 18:12:45 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux Getting Help on commands: $ man pwd $ info pwd $ help pwd Go to home to home directory: $ cd ~ How much time it took to execute the command: $ time pwd To find out where a particular command is taken from: $ type bash bash is /bin/bash type command to check built-in or external command $ type pwd pwd is a shell builtin $ type bash bash is /bin/bash To see the executed command history: $ history To execute 23rd command: $ !23 To execute last command: $ !! To edit history command by number, opens in VI: $ fc 12 To runs the most recent command that contains a particular string of characters: $ !?string? To show current user: $ who am i siva pts/0 2016-08-22 10:26 (192.168.56.1) $ grep siva /etc/passwd siva:x:1000:1000:Siva:/home/siva:/bin/bash $ hostname siva-centos7 ls command: $ ls -al $ ls --help $ ls --hide=Desktop $ date Mon Aug 22 10:33:50 IST 2016 $ date +'%d/%m/%y' 22/08/16 $ date +'%A, %B %d, %Y' Tuesday, October 21, 2014 date --help $ id uid=1000(siva) gid=1000(siva) groups=1000(siva),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 See which users logged into the system currently $ who -uH NAME LINE TIME IDLE PID COMMENT siva :0 2016-08-22 10:11 ? 2575 (:0) siva tty2 2016-08-22 10:12 00:29 3443 siva pts/0 2016-08-22 10:26 . 3935 (192.168.56.1) List all aliases: $ alias If a command is not in your PATH variable: $ locate chage Terminal shorcuts Alt+F = Word forward Go forward one word. Alt+B = Word backward Go backward one word. Ctrl+A = Beginning of line Go to the beginning of the current line. Ctrl+E = End of line Go to the end of the line. Ctrl+L = Clear screen Clear screen and leave line at the top of the screen. Alt+U = Uppercase word Change the current word to uppercase. Alt+L = Lowercase word Change the current word to lowercase. Alt+C = Capitalize word Change the current word to an initial capital Alias alias sai='sudo apt-get install' unalias sai For all users /etc/profile /etc/bashrc User specific config files ~/.bash_profile ~/.bashrc ~/.bash_logout To reload config file: $ source ~/.bashrc touch command $ touch memo{1,2,3,4,5} $ ls memo1 memo2 memo3 memo4 memo5 $ touch {John,Bill,Sally}-{Breakfast,Lunch,Dinner} $ ls Bill-Breakfast Bill-Lunch John-Dinner Sally-Breakfast Sally-Lunch Bill-Dinner John-Breakfast John-Lunch Sally-Dinner $ rm -f {John,Bill,Sally}-{Breakfast,Lunch,Dinner} $ touch {a..f}{1..5} $ ls a1 a3 a5 b2 b4 c1 c3 c5 d2 d4 e1 e3 e5 f2 f4 a2 a4 b1 b3 b5 c2 c4 d1 d3 d5 e2 e4 f1 f3 f5 ls command $ ls -l total 4 -rw-rw-r--. 1 joe joe 0 Dec 18 13:38 apple lrwxrwxrwx. 1 joe joe 5 Dec 18 13:46 pointer_to_apple - apple -rwxr-xr-x. 1 joe joe 0 Dec 18 13:37 scriptx.sh To show hidden and non-hidden files:: $ ls -a To list all files by time most recently modified: $ ls -at To list files and append file-type indicators: $ ls -F $ ls --hide=g* $ ls -ld $HOME/test/ To list all files and directories recursively from current directory down: $ ls -R To list files by size: $ ls -S Permissions First character of permission: hyphen (-) : a regular file d : a directory l ( lowercase L) : a symbolic link b (for a block device) c (for a character device) s (for a socket) p (for a named pipe) x: an executable file (a script or binary file that runs as a command) Changing permissions with chmod (numbers) each permission (read, write, and execute) is assigned a number r=4, w=2, and x=1 For example, to make permissions wide open for yourself as owner, you would set the first number to 7 (4+2+1), and then you would give the group and others read-only permission by setting both the second and third numbers to 4 (4+0+0), so that the final number is 744. # chmod 777 file - rwxrwxrwx # chmod 755 file - rwxr-xr-x # chmod 644 file - rw-r--r- # chmod 000 file - --------- All files and directories below, and including, the myapps directory $ chmod -R 755 $HOME/myapps Changing permissions with chmod (letters) user (u), group (g), other (o),all users (a). read (r), write (w), and execute (x) Current : (rwxrwxrwx). $ chmod a-w file - r-xr-xr-x $ chmod o-x file - rwxrwxrw- $ chmod go-rwx file - rwx------ Current: (---------). $ chmod u+rw files - rw------- $ chmod a+x files - --x--x--x $ chmod ug+rx files - r-xr-x--- $ chmod -R o-w $HOME/myapps Changing file ownership # chown joe /home/joe/memo.txt # ls -l /home/joe/memo.txt -rw-r--r--. 1 joe root 0 Dec 19 11:23 /home/joe/memo.txt To change group as well # chown joe:joe /home/joe/memo.txt # ls -l /home/joe/memo.txt -rw-r--r--. 1 joe joe 0 Dec 19 11:23 /home/joe/memo.txt # chown -R joe:joe /media/myusb Moving, Copying, and Removing Files $ mv abc def $ mv abc ~ $ mv /home/joe/mymemos/ /home/joe/Documents/ $ cp abc def $ cp abc ~ $ cp -r /usr/share/doc/bash-completion* /tmp/a/ $ cp -ra /usr/share/doc/bash-completion* /tmp/b/ $ rm abc $ rm * $ rmdir /home/joe/nothing/ $ rm -r /home/joe/bigdir/ $ rm -rf /home/joe/hugedir/ The backslash causes any command to run unaliased. \\rm bigdir VIM 0 (zero) \u2014 Moves the cursor to the beginning of the current line. $ Moves the cursor to the end of the current line. ZZ \u2014 Saves the current changes to the file and exits from vi. :w \u2014 Saves the current file but doesn't exit from vi. :wq \u2014 Works the same as ZZ. :q \u2014 Quits the current file. This works only if you don\u2019t have any unsaved changes. :q! \u2014 Quits the current file and doesn\u2019t save the changes you just made to the file. $ locate .bashrc /etc/skel/.bashrc /home/cnegus/.bashrc # locate .bashrc /etc/skel/.bashrc /home/bill/.bashrc /home/joe/.bashrc /root/.bashrc find command # find /etc -name passwd /etc/pam.d/passwd /etc/passwd # find /etc -iname '*passwd*' /etc/pam.d/passwd /etc/passwd- /etc/passwd.OLD /etc/passwd /etc/MYPASSWD /etc/security/opasswd Finding files by size $ find /usr/share/ -size +10M $ find /mostlybig -size -1M $ find /bigdata -size +500M -size -5G -exec du -sh {} \\; 4.1G /bigdata/images/rhel6.img 606M /bigdata/Fedora-16-i686-Live-Desktop.iso 560M /bigdata/dance2.avi Finding files by user $ find /home -user chris -ls # find /home -user chris -or -user joe -ls # find /etc -group ntp -ls # find /var/spool -not -user root -ls Finding files by permission $ find /bin -perm 755 -ls $ find /home/chris/ -perm -222 -type d -ls $ find /myreadonly -perm +222 -type f $ find . -perm -002 -type f -ls Finding files by date and time changed in past 10 minutes: $ find /etc/ -mmin -10 changed in the past three days: $ find /bin /usr/bin /sbin /usr/sbin -ctime -3 have not been accessed in more than 300 days: $ find /var/ftp /var/www -atime +300 The time options (-atime, -ctime, and -mtime) based on the number of days The min options (-amin, -cmin, and -mmin) do the same in minutes. $ find /etc -iname iptables -exec echo \"I found {}\" \\; I found /etc/bash_completion.d/iptables I found /etc/sysconfig/iptables $ find /usr/share -size +5M -exec du {} \\; | sort -nr $ find /var/allusers/ -user joe -ok mv {} /tmp/joe/ \\; -ok asks for confirmation grep command $ grep desktop /etc/services $ grep -i desktop /etc/services To search for lines that don\u2019t contain a selected text string, use the -v option. $ grep -vi tcp /etc/services -r : recursively -l : list filenames only $ grep -rli peerdns /usr/share/doc/ $ ip addr show | grep inet","title":"Linux"},{"location":"linux/#linux-commands","text":"The default prompt for regular user is $ and for root user is # Ex: [siva@siva-mint ~]$ [siva@siva-mint ~]# How to determine whether a given Linux is 32 bit or 64 bit? $ uname -m x86_64 == 64-bit kernel i686 == 32-bit kernel Show distribution info: $ uname -a Linux localhost.localdomain 4.5.7-300.fc24.x86_64 #1 SMP Wed Jun 8 18:12:45 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux Getting Help on commands: $ man pwd $ info pwd $ help pwd Go to home to home directory: $ cd ~ How much time it took to execute the command: $ time pwd To find out where a particular command is taken from: $ type bash bash is /bin/bash type command to check built-in or external command $ type pwd pwd is a shell builtin $ type bash bash is /bin/bash To see the executed command history: $ history To execute 23rd command: $ !23 To execute last command: $ !! To edit history command by number, opens in VI: $ fc 12 To runs the most recent command that contains a particular string of characters: $ !?string? To show current user: $ who am i siva pts/0 2016-08-22 10:26 (192.168.56.1) $ grep siva /etc/passwd siva:x:1000:1000:Siva:/home/siva:/bin/bash $ hostname siva-centos7 ls command: $ ls -al $ ls --help $ ls --hide=Desktop $ date Mon Aug 22 10:33:50 IST 2016 $ date +'%d/%m/%y' 22/08/16 $ date +'%A, %B %d, %Y' Tuesday, October 21, 2014 date --help $ id uid=1000(siva) gid=1000(siva) groups=1000(siva),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 See which users logged into the system currently $ who -uH NAME LINE TIME IDLE PID COMMENT siva :0 2016-08-22 10:11 ? 2575 (:0) siva tty2 2016-08-22 10:12 00:29 3443 siva pts/0 2016-08-22 10:26 . 3935 (192.168.56.1) List all aliases: $ alias If a command is not in your PATH variable: $ locate chage","title":"Linux Commands"},{"location":"linux/#terminal-shorcuts","text":"Alt+F = Word forward Go forward one word. Alt+B = Word backward Go backward one word. Ctrl+A = Beginning of line Go to the beginning of the current line. Ctrl+E = End of line Go to the end of the line. Ctrl+L = Clear screen Clear screen and leave line at the top of the screen. Alt+U = Uppercase word Change the current word to uppercase. Alt+L = Lowercase word Change the current word to lowercase. Alt+C = Capitalize word Change the current word to an initial capital","title":"Terminal shorcuts"},{"location":"linux/#alias","text":"alias sai='sudo apt-get install' unalias sai For all users /etc/profile /etc/bashrc User specific config files ~/.bash_profile ~/.bashrc ~/.bash_logout To reload config file: $ source ~/.bashrc","title":"Alias"},{"location":"linux/#touch-command","text":"$ touch memo{1,2,3,4,5} $ ls memo1 memo2 memo3 memo4 memo5 $ touch {John,Bill,Sally}-{Breakfast,Lunch,Dinner} $ ls Bill-Breakfast Bill-Lunch John-Dinner Sally-Breakfast Sally-Lunch Bill-Dinner John-Breakfast John-Lunch Sally-Dinner $ rm -f {John,Bill,Sally}-{Breakfast,Lunch,Dinner} $ touch {a..f}{1..5} $ ls a1 a3 a5 b2 b4 c1 c3 c5 d2 d4 e1 e3 e5 f2 f4 a2 a4 b1 b3 b5 c2 c4 d1 d3 d5 e2 e4 f1 f3 f5","title":"touch command"},{"location":"linux/#ls-command","text":"$ ls -l total 4 -rw-rw-r--. 1 joe joe 0 Dec 18 13:38 apple lrwxrwxrwx. 1 joe joe 5 Dec 18 13:46 pointer_to_apple - apple -rwxr-xr-x. 1 joe joe 0 Dec 18 13:37 scriptx.sh To show hidden and non-hidden files:: $ ls -a To list all files by time most recently modified: $ ls -at To list files and append file-type indicators: $ ls -F $ ls --hide=g* $ ls -ld $HOME/test/ To list all files and directories recursively from current directory down: $ ls -R To list files by size: $ ls -S","title":"ls command"},{"location":"linux/#permissions","text":"First character of permission: hyphen (-) : a regular file d : a directory l ( lowercase L) : a symbolic link b (for a block device) c (for a character device) s (for a socket) p (for a named pipe) x: an executable file (a script or binary file that runs as a command) Changing permissions with chmod (numbers) each permission (read, write, and execute) is assigned a number r=4, w=2, and x=1 For example, to make permissions wide open for yourself as owner, you would set the first number to 7 (4+2+1), and then you would give the group and others read-only permission by setting both the second and third numbers to 4 (4+0+0), so that the final number is 744. # chmod 777 file - rwxrwxrwx # chmod 755 file - rwxr-xr-x # chmod 644 file - rw-r--r- # chmod 000 file - --------- All files and directories below, and including, the myapps directory $ chmod -R 755 $HOME/myapps Changing permissions with chmod (letters) user (u), group (g), other (o),all users (a). read (r), write (w), and execute (x) Current : (rwxrwxrwx). $ chmod a-w file - r-xr-xr-x $ chmod o-x file - rwxrwxrw- $ chmod go-rwx file - rwx------ Current: (---------). $ chmod u+rw files - rw------- $ chmod a+x files - --x--x--x $ chmod ug+rx files - r-xr-x--- $ chmod -R o-w $HOME/myapps Changing file ownership # chown joe /home/joe/memo.txt # ls -l /home/joe/memo.txt -rw-r--r--. 1 joe root 0 Dec 19 11:23 /home/joe/memo.txt To change group as well # chown joe:joe /home/joe/memo.txt # ls -l /home/joe/memo.txt -rw-r--r--. 1 joe joe 0 Dec 19 11:23 /home/joe/memo.txt # chown -R joe:joe /media/myusb Moving, Copying, and Removing Files $ mv abc def $ mv abc ~ $ mv /home/joe/mymemos/ /home/joe/Documents/ $ cp abc def $ cp abc ~ $ cp -r /usr/share/doc/bash-completion* /tmp/a/ $ cp -ra /usr/share/doc/bash-completion* /tmp/b/ $ rm abc $ rm * $ rmdir /home/joe/nothing/ $ rm -r /home/joe/bigdir/ $ rm -rf /home/joe/hugedir/ The backslash causes any command to run unaliased. \\rm bigdir","title":"Permissions"},{"location":"linux/#vim","text":"0 (zero) \u2014 Moves the cursor to the beginning of the current line. $ Moves the cursor to the end of the current line. ZZ \u2014 Saves the current changes to the file and exits from vi. :w \u2014 Saves the current file but doesn't exit from vi. :wq \u2014 Works the same as ZZ. :q \u2014 Quits the current file. This works only if you don\u2019t have any unsaved changes. :q! \u2014 Quits the current file and doesn\u2019t save the changes you just made to the file. $ locate .bashrc /etc/skel/.bashrc /home/cnegus/.bashrc # locate .bashrc /etc/skel/.bashrc /home/bill/.bashrc /home/joe/.bashrc /root/.bashrc","title":"VIM"},{"location":"linux/#find-command","text":"# find /etc -name passwd /etc/pam.d/passwd /etc/passwd # find /etc -iname '*passwd*' /etc/pam.d/passwd /etc/passwd- /etc/passwd.OLD /etc/passwd /etc/MYPASSWD /etc/security/opasswd Finding files by size $ find /usr/share/ -size +10M $ find /mostlybig -size -1M $ find /bigdata -size +500M -size -5G -exec du -sh {} \\; 4.1G /bigdata/images/rhel6.img 606M /bigdata/Fedora-16-i686-Live-Desktop.iso 560M /bigdata/dance2.avi Finding files by user $ find /home -user chris -ls # find /home -user chris -or -user joe -ls # find /etc -group ntp -ls # find /var/spool -not -user root -ls Finding files by permission $ find /bin -perm 755 -ls $ find /home/chris/ -perm -222 -type d -ls $ find /myreadonly -perm +222 -type f $ find . -perm -002 -type f -ls Finding files by date and time changed in past 10 minutes: $ find /etc/ -mmin -10 changed in the past three days: $ find /bin /usr/bin /sbin /usr/sbin -ctime -3 have not been accessed in more than 300 days: $ find /var/ftp /var/www -atime +300 The time options (-atime, -ctime, and -mtime) based on the number of days The min options (-amin, -cmin, and -mmin) do the same in minutes. $ find /etc -iname iptables -exec echo \"I found {}\" \\; I found /etc/bash_completion.d/iptables I found /etc/sysconfig/iptables $ find /usr/share -size +5M -exec du {} \\; | sort -nr $ find /var/allusers/ -user joe -ok mv {} /tmp/joe/ \\; -ok asks for confirmation","title":"find command"},{"location":"linux/#grep-command","text":"$ grep desktop /etc/services $ grep -i desktop /etc/services To search for lines that don\u2019t contain a selected text string, use the -v option. $ grep -vi tcp /etc/services -r : recursively -l : list filenames only $ grep -rli peerdns /usr/share/doc/ $ ip addr show | grep inet","title":"grep command"},{"location":"maven/","text":"Maven Install artifacts into local repository mvn install:install-file -DgroupId=oracle -DartifactId=ojdbc14 -Dpackaging=jar -Dversion=1.0 -Dfile=ojdbc14.jar -DgeneratePom=true Commonly used Plugins Sonar Maven Plugin properties sonar.jdbc.url jdbc:mysql://localhost:3306/sonar /sonar.jdbc.url sonar.jdbc.username sonar /sonar.jdbc.username sonar.jdbc.password sonar /sonar.jdbc.password sonar.host.url http://localhost:9000 /sonar.host.url /properties plugin groupId org.codehaus.mojo /groupId artifactId sonar-maven-plugin /artifactId version 2.1 /version /plugin","title":"Maven"},{"location":"maven/#maven","text":"","title":"Maven"},{"location":"maven/#install-artifacts-into-local-repository","text":"mvn install:install-file -DgroupId=oracle -DartifactId=ojdbc14 -Dpackaging=jar -Dversion=1.0 -Dfile=ojdbc14.jar -DgeneratePom=true","title":"Install artifacts into local repository"},{"location":"maven/#commonly-used-plugins","text":"","title":"Commonly used Plugins"},{"location":"maven/#sonar-maven-plugin","text":"properties sonar.jdbc.url jdbc:mysql://localhost:3306/sonar /sonar.jdbc.url sonar.jdbc.username sonar /sonar.jdbc.username sonar.jdbc.password sonar /sonar.jdbc.password sonar.host.url http://localhost:9000 /sonar.host.url /properties plugin groupId org.codehaus.mojo /groupId artifactId sonar-maven-plugin /artifactId version 2.1 /version /plugin","title":"Sonar Maven Plugin"}]}