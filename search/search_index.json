{
    "docs": [
        {
            "location": "/",
            "text": "Home\n\n\nWelcome to My Quick Reference Cheatsheets\n\n\nWebsite: \nhttp://sivalabs.in",
            "title": "Home"
        },
        {
            "location": "/#home",
            "text": "Welcome to My Quick Reference Cheatsheets  Website:  http://sivalabs.in",
            "title": "Home"
        },
        {
            "location": "/tools/",
            "text": "My favorite development tools\n\n\nCommandLine Tools\n\n\n\n\nBabun\n - a Windows shell you will love!.\n\n\niTerms2\n - iTerm2 is a replacement for Terminal that works on Macs with macOS 10.8 or newer.\n\n\nOh-My-Zsh\n - Your terminal never felt this good before.\n\n\n\n\nIDE\n\n\n\n\nIntellij IDEA\n\n\nSpring Tool Suite\n\n\nNetBeans\n\n\nAndroid Studio\n\n\nVisual Studio Code\n\n\nAtom\n\n\nSublime Text\n\n\n\n\nTask Tracking Tools\n\n\n\n\nAsana\n\n\nEverNote\n\n\nTrello\n\n\n\n\nUtilities\n\n\n\n\nPostman\n - REST Client\n\n\nInsomina\n - REST client\n\n\nBitwarden\n - Password Manager\n\n\nSimpleMind\n - Mind Mapping tool\n\n\nGIF Brewery\n - Create GIFs\n\n\nRambox\n - Messaging and emailing app that combines common web applications into one.\n\n\n\n\nStatic Site Generators\n\n\n\n\nHugo\n\n\nJekyll\n\n\nMkDocs\n\n\n\n\nDevOps\n\n\n\n\nDocker\n\n\nDocker Compose\n\n\nVagrant\n - Development Environments Made Easy\n\n\nAnsible\n - AUTOMATION FOR EVERYONE\n\n\nJenkins\n - Build great things at any scale\n\n\nJenkinx-X\n - Jenkins X is a CI/CD solution for modern cloud applications on Kubernetes\n\n\nKubernetes\n - Automating deployment, scaling, and management of containerized applications.\n\n\nHelm\n - The package manager for Kubernetes",
            "title": "Tools"
        },
        {
            "location": "/tools/#my-favorite-development-tools",
            "text": "",
            "title": "My favorite development tools"
        },
        {
            "location": "/tools/#commandline-tools",
            "text": "Babun  - a Windows shell you will love!.  iTerms2  - iTerm2 is a replacement for Terminal that works on Macs with macOS 10.8 or newer.  Oh-My-Zsh  - Your terminal never felt this good before.",
            "title": "CommandLine Tools"
        },
        {
            "location": "/tools/#ide",
            "text": "Intellij IDEA  Spring Tool Suite  NetBeans  Android Studio  Visual Studio Code  Atom  Sublime Text",
            "title": "IDE"
        },
        {
            "location": "/tools/#task-tracking-tools",
            "text": "Asana  EverNote  Trello",
            "title": "Task Tracking Tools"
        },
        {
            "location": "/tools/#utilities",
            "text": "Postman  - REST Client  Insomina  - REST client  Bitwarden  - Password Manager  SimpleMind  - Mind Mapping tool  GIF Brewery  - Create GIFs  Rambox  - Messaging and emailing app that combines common web applications into one.",
            "title": "Utilities"
        },
        {
            "location": "/tools/#static-site-generators",
            "text": "Hugo  Jekyll  MkDocs",
            "title": "Static Site Generators"
        },
        {
            "location": "/tools/#devops",
            "text": "Docker  Docker Compose  Vagrant  - Development Environments Made Easy  Ansible  - AUTOMATION FOR EVERYONE  Jenkins  - Build great things at any scale  Jenkinx-X  - Jenkins X is a CI/CD solution for modern cloud applications on Kubernetes  Kubernetes  - Automating deployment, scaling, and management of containerized applications.  Helm  - The package manager for Kubernetes",
            "title": "DevOps"
        },
        {
            "location": "/docker/",
            "text": "Docker Commands\n\n\nDocker basics\n\n\nStart a container in interactive attached mode: \ndocker run -i -t ubuntu:16.04 /bin/bash\n\n\nDetach from a container: \nCtrl + P Ctrl + Q\n\n\nStart a container in detached mode: \ndocker run -d ubuntu:16.04 /bin/bash\n\n\nView logs of a container: \ndocker logs ContainerId\n\n\nStart/Stop/Pause/Restart a container:\n\n\n\n\ndocker start ContainerID\n\n\ndocker stop ContainerID\n\n\ndocker restart ContainerID\n\n\ndocker pause ContainerID\n\n\ndocker unpause ContainerID\n\n\n\n\nList running containers: \ndocker ps\n\n\nList all containers: \ndocker ps -a\n\n\nList only container ids: \ndocker ps -aq\n\n\nList container ids not running: \ndocker ps -aq -f status=exited\n\n\nDelete a container: \ndocker rm containerId\n\n\nDelete all stopped containers:\n\n\n\n\ndocker rm $(docker ps -aq status=exited)\n\n\ndocker container prune\n\n\n\n\nAutomatically remove container once stopped: \ndocker run -i -t --rm ubuntu:16.04 /bin/bash\n\n\nCommit changes in a docker container: \ndocker commit ContainerID username/repository\n\n\nCreate Docker Image\n\n\nBuild an image using Dockerfile: \ndocker build -t sivaprasadreddy/myapp:1.0 .\n\n\nBuild an image using different Dockerfile name: \n\n\ndocker build -t busyboxplus:1.0 -f ./myfolder/MyDockerFile\n\n\nView layers of a container: \ndocker history ContainerId\n\n\nSample Dockerfile\n\n\n# A basic apache server. To use either add or bind mount content under /var/www\nFROM ubuntu:12.04\n\nLABEL maintainer=\"siva@mail.com\"\n\nRUN apt-get update && apt-get install -y apache2 && \\ \n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\nENV APACHE_RUN_USER www-data\nENV APACHE_RUN_GROUP www-data\nENV APACHE_LOG_DIR /var/log/apache2\n\nEXPOSE 80\n\nCMD [\"/usr/sbin/apache2\", \"-D\", \"FOREGROUND\"]\n\n\n\n\nDocker Instructions\n\n\nFROM\n : The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions.\n\n\nFROM <image>[:<tag>|@<digest>]\n\n\nFROM ubuntu:latest\n\n\nCOPY\n: The COPY instruction copies new files or directories from \n<src>\n and adds them to the filesystem of the container at the path \n<dest>\n.\n\n\nCOPY <src> ... <dst>\n\n\nCOPY html /var/www/html\n\n\nCOPY httpd.conf magic /etc/httpd/conf/\n\n\nADD\n: The ADD instruction copies new files, directories or remote file URLs from \n<src>\n and adds them to the filesystem of the image at the path \n<dest>\n.\n\n\nADD <src> ... <dst>\n\n\nADD web-page-config.tar /\n\n\nENV\n: The ENV instruction sets the environment variable \n<key>\n to the value \n<value>\n.\n\n\nENV <key> <value>\n\n\nENV DEBUG_LVL 3\n\n\nENV APACHE_LOG_DIR /var/log/apache\n\n\nWORKDIR\n : The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile. If the WORKDIR doesn\u2019t exist, it will be created even if it\u2019s not used in any subsequent Dockerfile instruction.\n\n\nWORKDIR <dirpath>\n\n\nWORKDIR /var/log\n\n\nEXPOSE\n: The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime.\n\n\nEXPOSE <port>[/<proto>] [<port>[/<proto>]...]\n\n\nEXPOSE 8080 8787\n\n\nLABEL\n: The LABEL instruction adds metadata to an image. A LABEL is a key-value pair.\n\n\nLABEL <key-1>=<val-1> <key-2>=<val-2> ... <key-n>=<val-n>\n\n\nLABEL version=\"2.0\" release-date=\"2016-08-05\"\n\n\nRUN\n The \nRUN\n command executes during build time.\n\n\nRUN <command>\n (or) \nRUN [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"]\n\n\n\n\nRUN echo \"echo Welcome to Docker!\" >> /root/.bashrc\n\n\nRUN [\"bash\", \"-c\", \"rm\", \"-rf\", \"/tmp/abc\"]\n\n\n\n\nCMD\n: The CMD is to provide defaults for an executing container and runs when container starts. There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect.\n\n\nCMD <command>\n (or) \nCMD [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"]\n (or) \nCMD [\"<arg-1>\", ..., \"<arg-n>\"]\n\n\n//Dockerfile to demonstrate the behavior of CMD\n\n\nFROM busybox:latest\nMAINTAINER Siva <sivaprasadreddy.k@gmail.com>\nCMD [\"echo\", \"Dockerfile CMD demo\"]\n\n\n\n\n> docker build -t cmd-demo .\n\n\n> sudo docker run cmd-demo\n\n\nOutput\n : Dockerfile CMD demo\n\n\n> sudo docker run cmd-demo echo Override CMD demo\n\n\nOutput\n : Override CMD demo\n\n\nENTRYPOINT\n: An ENTRYPOINT allows you to configure a container that will run as an executable.\n\n\nENTRYPOINT <command>\n (or) \nENTRYPOINT [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"]\n\n\nOnly the last ENTRYPOINT instruction will be effective.\n\n\n//Dockerfile to demonstrate the behavior of ENTRYPOINT\n\n\nFROM busybox:latest\nENTRYPOINT [\"echo\", \"Dockerfile ENTRYPOINT demo\"]\n\n\n\n\n> sudo docker build -t entrypoint-demo .\n\n\n> sudo docker run entrypoint-demo\n\n\nOutput\n : Dockerfile ENTRYPOINT demo\n\n\n> sudo docker run entrypoint-demo with additional arguments\n\n\nOutput\n : Dockerfile ENTRYPOINT demo with additional arguments\n\n\n> sudo docker run -it --entrypoint=\"/bin/sh\" entrypoint-demo\n\n\nOutput\n : /#\n\n\nHEALTHCHECK\n: The \nHEALTHCHECK\n instruction tells Docker how to test a container to check that it is still working.\n\n\nHEALTHCHECK [<options>] CMD <command>\n\n\nOnly the last HEALTHCHECK instruction will take effect.\n\n\nHEALTHCHECK --interval=5m --timeout=3s CMD curl -f http://localhost/ || exit 1\n\n\nPush image to DockerHub\n\n\n$ docker images -a\n\n\n$ docker login\n\n\nUsername: sivaprasadreddy\n\n\nPassword: my_password\n\n\n\n\ndocker push sivaprasadreddy/myapp\n\n\n\n\nDelete Image\n\n\n\n\ndocker rmi sivaprasadreddy/myapp\n\n\n\n\nDocker cleanup\n\n\nDelete volumes\n\n\n\n\ndocker volume rm $(docker volume ls -qf dangling=true)\n\n\ndocker volume ls -qf dangling=true | xargs -r docker volume rm\n\n\n\n\nDelete networks\n\n\n\n\ndocker network ls\n\n\ndocker network ls | grep \"bridge\"\n\n\ndocker network rm $(docker network ls | grep \"bridge\" | awk '/ / { print $1 }')\n\n\ndocker network prune\n\n\n\n\nRemove docker images\n\n\n\n\ndocker images\n\n\ndocker rmi $(docker images -q)\n //delete all images\n\n\ndocker rmi $(docker images --filter \"dangling=true\" -q --no-trunc)\n\n\ndocker images | grep \"none\"\n\n\ndocker rmi $(docker images | grep \"none\" | awk '/ / { print $3 }')\n\n\n\n\nRemove docker containers\n\n\n\n\ndocker ps -a\n\n\ndocker kill $(docker ps -q)\n\n\ndocker rm $(docker ps -qa --no-trunc --filter \"status=exited\")\n\n\n\n\nDocker System Prune\n\n\n$ docker system prune -a\n\nWARNING! This will remove:\n    - all stopped containers\n    - all volumes not used by at least one container\n    - all networks not used by at least one container\n    - all images without at least one container associated to them\nAre you sure you want to continue? [y/N] y\n\n\n\n\nResize disk space for docker vm\n\n\n\n\ndocker-machine create --driver virtualbox --virtualbox-disk-size \"40000\" default",
            "title": "Docker"
        },
        {
            "location": "/docker/#docker-commands",
            "text": "",
            "title": "Docker Commands"
        },
        {
            "location": "/docker/#docker-basics",
            "text": "Start a container in interactive attached mode:  docker run -i -t ubuntu:16.04 /bin/bash  Detach from a container:  Ctrl + P Ctrl + Q  Start a container in detached mode:  docker run -d ubuntu:16.04 /bin/bash  View logs of a container:  docker logs ContainerId  Start/Stop/Pause/Restart a container:   docker start ContainerID  docker stop ContainerID  docker restart ContainerID  docker pause ContainerID  docker unpause ContainerID   List running containers:  docker ps  List all containers:  docker ps -a  List only container ids:  docker ps -aq  List container ids not running:  docker ps -aq -f status=exited  Delete a container:  docker rm containerId  Delete all stopped containers:   docker rm $(docker ps -aq status=exited)  docker container prune   Automatically remove container once stopped:  docker run -i -t --rm ubuntu:16.04 /bin/bash  Commit changes in a docker container:  docker commit ContainerID username/repository",
            "title": "Docker basics"
        },
        {
            "location": "/docker/#create-docker-image",
            "text": "Build an image using Dockerfile:  docker build -t sivaprasadreddy/myapp:1.0 .  Build an image using different Dockerfile name:   docker build -t busyboxplus:1.0 -f ./myfolder/MyDockerFile  View layers of a container:  docker history ContainerId  Sample Dockerfile  # A basic apache server. To use either add or bind mount content under /var/www\nFROM ubuntu:12.04\n\nLABEL maintainer=\"siva@mail.com\"\n\nRUN apt-get update && apt-get install -y apache2 && \\ \n    apt-get clean && rm -rf /var/lib/apt/lists/*\n\nENV APACHE_RUN_USER www-data\nENV APACHE_RUN_GROUP www-data\nENV APACHE_LOG_DIR /var/log/apache2\n\nEXPOSE 80\n\nCMD [\"/usr/sbin/apache2\", \"-D\", \"FOREGROUND\"]",
            "title": "Create Docker Image"
        },
        {
            "location": "/docker/#docker-instructions",
            "text": "FROM  : The FROM instruction initializes a new build stage and sets the Base Image for subsequent instructions.  FROM <image>[:<tag>|@<digest>]  FROM ubuntu:latest  COPY : The COPY instruction copies new files or directories from  <src>  and adds them to the filesystem of the container at the path  <dest> .  COPY <src> ... <dst>  COPY html /var/www/html  COPY httpd.conf magic /etc/httpd/conf/  ADD : The ADD instruction copies new files, directories or remote file URLs from  <src>  and adds them to the filesystem of the image at the path  <dest> .  ADD <src> ... <dst>  ADD web-page-config.tar /  ENV : The ENV instruction sets the environment variable  <key>  to the value  <value> .  ENV <key> <value>  ENV DEBUG_LVL 3  ENV APACHE_LOG_DIR /var/log/apache  WORKDIR  : The WORKDIR instruction sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile. If the WORKDIR doesn\u2019t exist, it will be created even if it\u2019s not used in any subsequent Dockerfile instruction.  WORKDIR <dirpath>  WORKDIR /var/log  EXPOSE : The EXPOSE instruction informs Docker that the container listens on the specified network ports at runtime.  EXPOSE <port>[/<proto>] [<port>[/<proto>]...]  EXPOSE 8080 8787  LABEL : The LABEL instruction adds metadata to an image. A LABEL is a key-value pair.  LABEL <key-1>=<val-1> <key-2>=<val-2> ... <key-n>=<val-n>  LABEL version=\"2.0\" release-date=\"2016-08-05\"  RUN  The  RUN  command executes during build time.  RUN <command>  (or)  RUN [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"]   RUN echo \"echo Welcome to Docker!\" >> /root/.bashrc  RUN [\"bash\", \"-c\", \"rm\", \"-rf\", \"/tmp/abc\"]   CMD : The CMD is to provide defaults for an executing container and runs when container starts. There can only be one CMD instruction in a Dockerfile. If you list more than one CMD then only the last CMD will take effect.  CMD <command>  (or)  CMD [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"]  (or)  CMD [\"<arg-1>\", ..., \"<arg-n>\"]  //Dockerfile to demonstrate the behavior of CMD  FROM busybox:latest\nMAINTAINER Siva <sivaprasadreddy.k@gmail.com>\nCMD [\"echo\", \"Dockerfile CMD demo\"]  > docker build -t cmd-demo .  > sudo docker run cmd-demo  Output  : Dockerfile CMD demo  > sudo docker run cmd-demo echo Override CMD demo  Output  : Override CMD demo  ENTRYPOINT : An ENTRYPOINT allows you to configure a container that will run as an executable.  ENTRYPOINT <command>  (or)  ENTRYPOINT [\"<exec>\", \"<arg-1>\", ..., \"<arg-n>\"]  Only the last ENTRYPOINT instruction will be effective.  //Dockerfile to demonstrate the behavior of ENTRYPOINT  FROM busybox:latest\nENTRYPOINT [\"echo\", \"Dockerfile ENTRYPOINT demo\"]  > sudo docker build -t entrypoint-demo .  > sudo docker run entrypoint-demo  Output  : Dockerfile ENTRYPOINT demo  > sudo docker run entrypoint-demo with additional arguments  Output  : Dockerfile ENTRYPOINT demo with additional arguments  > sudo docker run -it --entrypoint=\"/bin/sh\" entrypoint-demo  Output  : /#  HEALTHCHECK : The  HEALTHCHECK  instruction tells Docker how to test a container to check that it is still working.  HEALTHCHECK [<options>] CMD <command>  Only the last HEALTHCHECK instruction will take effect.  HEALTHCHECK --interval=5m --timeout=3s CMD curl -f http://localhost/ || exit 1  Push image to DockerHub  $ docker images -a  $ docker login  Username: sivaprasadreddy  Password: my_password   docker push sivaprasadreddy/myapp   Delete Image   docker rmi sivaprasadreddy/myapp",
            "title": "Docker Instructions"
        },
        {
            "location": "/docker/#docker-cleanup",
            "text": "Delete volumes   docker volume rm $(docker volume ls -qf dangling=true)  docker volume ls -qf dangling=true | xargs -r docker volume rm   Delete networks   docker network ls  docker network ls | grep \"bridge\"  docker network rm $(docker network ls | grep \"bridge\" | awk '/ / { print $1 }')  docker network prune   Remove docker images   docker images  docker rmi $(docker images -q)  //delete all images  docker rmi $(docker images --filter \"dangling=true\" -q --no-trunc)  docker images | grep \"none\"  docker rmi $(docker images | grep \"none\" | awk '/ / { print $3 }')   Remove docker containers   docker ps -a  docker kill $(docker ps -q)  docker rm $(docker ps -qa --no-trunc --filter \"status=exited\")   Docker System Prune  $ docker system prune -a\n\nWARNING! This will remove:\n    - all stopped containers\n    - all volumes not used by at least one container\n    - all networks not used by at least one container\n    - all images without at least one container associated to them\nAre you sure you want to continue? [y/N] y  Resize disk space for docker vm   docker-machine create --driver virtualbox --virtualbox-disk-size \"40000\" default",
            "title": "Docker cleanup"
        },
        {
            "location": "/ansible/",
            "text": "Installation\n\n\nInstructions: http://docs.ansible.com/ansible/latest/intro_installation.html\n\n\nUbuntu\n\n\nsudo apt-get install software-properties-common\nsudo apt-add-repository ppa:ansible/ansible\nsudo apt-get update\nsudo apt-get install ansible\n\n\n\n\nMacOS\n\n\nsudo easy_install pip\nsudo pip install ansible\n\n\n\n\nGetting Started\n\n\nansible --version",
            "title": "Ansible"
        },
        {
            "location": "/ansible/#installation",
            "text": "Instructions: http://docs.ansible.com/ansible/latest/intro_installation.html",
            "title": "Installation"
        },
        {
            "location": "/ansible/#ubuntu",
            "text": "sudo apt-get install software-properties-common\nsudo apt-add-repository ppa:ansible/ansible\nsudo apt-get update\nsudo apt-get install ansible",
            "title": "Ubuntu"
        },
        {
            "location": "/ansible/#macos",
            "text": "sudo easy_install pip\nsudo pip install ansible",
            "title": "MacOS"
        },
        {
            "location": "/ansible/#getting-started",
            "text": "ansible --version",
            "title": "Getting Started"
        },
        {
            "location": "/maven/",
            "text": "Maven\n\n\nInstall artifacts into local repository\n\n\nmvn install:install-file -DgroupId=oracle -DartifactId=ojdbc14 -Dpackaging=jar -Dversion=1.0 -Dfile=ojdbc14.jar -DgeneratePom=true\n\n\nCommonly used Plugins\n\n\nSonar Maven Plugin\n\n\n<properties>\n  <sonar.jdbc.url>jdbc:mysql://localhost:3306/sonar</sonar.jdbc.url>\n  <sonar.jdbc.username>sonar</sonar.jdbc.username>\n  <sonar.jdbc.password>sonar</sonar.jdbc.password>\n  <sonar.host.url>http://localhost:9000</sonar.host.url>\n</properties>\n\n<plugin>\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>sonar-maven-plugin</artifactId>\n    <version>2.1</version>\n</plugin>",
            "title": "Maven"
        },
        {
            "location": "/maven/#maven",
            "text": "",
            "title": "Maven"
        },
        {
            "location": "/maven/#install-artifacts-into-local-repository",
            "text": "mvn install:install-file -DgroupId=oracle -DartifactId=ojdbc14 -Dpackaging=jar -Dversion=1.0 -Dfile=ojdbc14.jar -DgeneratePom=true",
            "title": "Install artifacts into local repository"
        },
        {
            "location": "/maven/#commonly-used-plugins",
            "text": "",
            "title": "Commonly used Plugins"
        },
        {
            "location": "/maven/#sonar-maven-plugin",
            "text": "<properties>\n  <sonar.jdbc.url>jdbc:mysql://localhost:3306/sonar</sonar.jdbc.url>\n  <sonar.jdbc.username>sonar</sonar.jdbc.username>\n  <sonar.jdbc.password>sonar</sonar.jdbc.password>\n  <sonar.host.url>http://localhost:9000</sonar.host.url>\n</properties>\n\n<plugin>\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>sonar-maven-plugin</artifactId>\n    <version>2.1</version>\n</plugin>",
            "title": "Sonar Maven Plugin"
        },
        {
            "location": "/linux/",
            "text": "Linux Commands\n\n\nThe default prompt for regular user is \n$\n and for root user is \n#\n\n\nEx: \n\n\n[siva@siva-mint ~]$\n[siva@siva-mint ~]#\n\n\n\nHow to determine whether a given Linux is 32 bit or 64 bit?\n\n\n$ uname -m\n\n\nx86_64 ==> 64-bit kernel\ni686   ==> 32-bit kernel\n\n\n\nShow distribution info:\n\n\n$ uname -a\n\n\nLinux localhost.localdomain 4.5.7-300.fc24.x86_64 #1 SMP Wed Jun 8 18:12:45 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n\n\n\nGetting Help on commands:\n\n\n$ man pwd\n$ info pwd\n$ help pwd\n\n\n\nGo to home to home directory: \n$ cd ~\n\n\nHow much time it took to execute the command: \n$ time pwd\n\n\nTo find out where a particular command is taken from:\n\n\n$ type bash\nbash is /bin/bash\n\n\n\ntype\n command to check built-in or external command\n\n\n$ type pwd\npwd is a shell builtin\n\n$ type bash\nbash is /bin/bash\n\n\n\nTo see the executed command history: \n$ history\n\n\nTo execute 23rd command: \n$ !23\n\n\nTo execute last command: \n$ !!\n\n\nTo edit history command by number, opens in VI: \n$ fc 12\n\n\nTo runs the most recent command that contains a particular string of characters: \n$ !?string?\n\n\nTo show current user:\n\n\n$ who am i\nsiva     pts/0        2016-08-22 10:26 (192.168.56.1)\n\n\n\n$ grep siva /etc/passwd\n\n\nsiva:x:1000:1000:Siva:/home/siva:/bin/bash\n\n\n\n$ hostname\n\n    siva-centos7\n\n\nls command:\n\n\n$ ls -al\n$ ls --help\n$ ls --hide=Desktop\n\n\n\n$ date\n\n\nMon Aug 22 10:33:50 IST 2016\n\n\n\n$ date +'%d/%m/%y'\n\n\n22/08/16\n\n\n\n$ date +'%A, %B %d, %Y'\n\n\nTuesday, October 21, 2014\n\n\n\ndate --help\n\n\n$ id\n\n\nuid=1000(siva) gid=1000(siva) groups=1000(siva),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\n\n\n\nSee which users logged into the system currently\n\n\n$ who -uH\nNAME     LINE         TIME             IDLE          PID COMMENT\nsiva     :0           2016-08-22 10:11   ?          2575 (:0)\nsiva     tty2         2016-08-22 10:12 00:29        3443\nsiva     pts/0        2016-08-22 10:26   .          3935 (192.168.56.1)\n\n\n\nList all aliases: \n$ alias\n\n\nIf a command is not in your PATH variable: \n$ locate chage\n\n\nTerminal shorcuts\n\n\nAlt+F => Word forward Go forward one word.\nAlt+B => Word backward Go backward one word.\nCtrl+A => Beginning of line Go to the beginning of the current line.\nCtrl+E => End of line Go to the end of the line.\nCtrl+L => Clear screen Clear screen and leave line at the top of the screen.\n\nAlt+U => Uppercase word Change the current word to uppercase.\nAlt+L => Lowercase word Change the current word to lowercase.\nAlt+C => Capitalize word Change the current word to an initial capital\n\n\n\nAlias\n\n\nalias sai='sudo apt-get install'\nunalias sai\n\n\n\n\nFor all users\n\n\n/etc/profile\n/etc/bashrc\n\n\n\nUser specific config files\n\n\n~/.bash_profile\n~/.bashrc\n~/.bash_logout\n\n\n\nTo reload config file: \n$ source ~/.bashrc\n\n\ntouch command\n\n\n$ touch memo{1,2,3,4,5}\n$ ls\nmemo1 memo2 memo3 memo4 memo5\n\n$ touch {John,Bill,Sally}-{Breakfast,Lunch,Dinner}\n$ ls\nBill-Breakfast Bill-Lunch John-Dinner Sally-Breakfast Sally-Lunch\nBill-Dinner John-Breakfast John-Lunch Sally-Dinner\n\n$ rm -f {John,Bill,Sally}-{Breakfast,Lunch,Dinner}\n\n$ touch {a..f}{1..5}\n$ ls\na1 a3 a5 b2 b4 c1 c3 c5 d2 d4 e1 e3 e5 f2 f4\na2 a4 b1 b3 b5 c2 c4 d1 d3 d5 e2 e4 f1 f3 f5\n\n\n\nls command\n\n\n$ ls -l\ntotal 4\n-rw-rw-r--. 1 joe joe 0 Dec 18 13:38 apple\nlrwxrwxrwx. 1 joe joe 5 Dec 18 13:46 pointer_to_apple -> apple\n-rwxr-xr-x. 1 joe joe 0 Dec 18 13:37 scriptx.sh\n\n\n\nTo show hidden and non-hidden files:: \n$ ls -a\n\n\nTo list all files by time most recently modified: \n$ ls -at\n\n\nTo list files and append file-type indicators: \n$ ls -F\n\n\n$ ls --hide=g*\n\n\n$ ls -ld $HOME/test/\n\n\nTo list all files and directories recursively from current directory down: \n$ ls -R\n\n\nTo list files by size: \n$ ls -S\n\n\nPermissions\n\n\nFirst character of permission:\n\n\nhyphen (-) : a regular file\nd : a directory\nl ( lowercase L) : a symbolic link\nb (for a block device)\nc (for a character device)\ns (for a socket)\np (for a named pipe)\nx: an executable file (a script or binary file that runs as a command)\n\n\n\nChanging permissions with chmod (numbers)\n\n\neach permission (read, write, and execute) is assigned a number\n\n\nr=4, w=2, and x=1\n\n\nFor example, to make permissions wide open for yourself as owner, \nyou would set the first number to 7 (4+2+1), and then you would give the group and others read-only\npermission by setting both the second and third numbers to 4 (4+0+0), so that the final\nnumber is 744.\n\n\n# chmod 777 file -> rwxrwxrwx\n# chmod 755 file -> rwxr-xr-x\n# chmod 644 file -> rw-r--r-\n# chmod 000 file -> ---------\n\n\n\nAll files and directories below, and including, the myapps directory\n\n\n$ chmod -R 755 $HOME/myapps\n\n\n\nChanging permissions with chmod (letters)\n\n\nuser (u), group (g), other (o),all users (a).\nread (r), write (w), and execute (x)\n\n\nCurrent : (rwxrwxrwx).\n\n\n$ chmod a-w file -> r-xr-xr-x\n$ chmod o-x file -> rwxrwxrw-\n$ chmod go-rwx file -> rwx------\n\n\n\nCurrent: (---------).\n\n\n$ chmod u+rw files -> rw-------\n$ chmod a+x files -> --x--x--x\n$ chmod ug+rx files -> r-xr-x---\n$ chmod -R o-w $HOME/myapps\n\n\n\nChanging file ownership\n\n\n# chown joe /home/joe/memo.txt\n# ls -l /home/joe/memo.txt\n-rw-r--r--. 1 joe root 0 Dec 19 11:23 /home/joe/memo.txt\n\n\n\nTo change group as well\n\n\n# chown joe:joe /home/joe/memo.txt\n# ls -l /home/joe/memo.txt\n-rw-r--r--. 1 joe joe 0 Dec 19 11:23 /home/joe/memo.txt\n\n# chown -R joe:joe /media/myusb\n\n\n\nMoving, Copying, and Removing Files\n\n\n$ mv abc def\n$ mv abc ~\n$ mv /home/joe/mymemos/ /home/joe/Documents/\n\n\n$ cp abc def\n$ cp abc ~\n$ cp -r /usr/share/doc/bash-completion* /tmp/a/\n$ cp -ra /usr/share/doc/bash-completion* /tmp/b/\n\n$ rm abc\n$ rm *\n$ rmdir /home/joe/nothing/\n$ rm -r /home/joe/bigdir/\n$ rm -rf /home/joe/hugedir/\n\n\n\nThe backslash causes any command to run unaliased.\n\n\n\\rm bigdir\n\n\n\nVIM\n\n\n0 (zero) \u2014 Moves the cursor to the beginning of the current line.\n$ Moves the cursor to the end of the current line.\n\nZZ \u2014 Saves the current changes to the file and exits from vi.\n:w \u2014 Saves the current file but doesn't exit from vi.\n:wq \u2014 Works the same as ZZ.\n:q \u2014 Quits the current file. This works only if you don\u2019t have any unsaved changes.\n:q! \u2014 Quits the current file and doesn\u2019t save the changes you just made to the file.\n\n\n\n$ locate .bashrc\n\n\n/etc/skel/.bashrc\n/home/cnegus/.bashrc\n\n\n\n# locate .bashrc\n\n\n/etc/skel/.bashrc\n/home/bill/.bashrc\n/home/joe/.bashrc\n/root/.bashrc\n\n\n\nfind command\n\n\n# find /etc -name passwd\n\n\n/etc/pam.d/passwd\n/etc/passwd\n\n\n\n# find /etc -iname '*passwd*'\n\n\n/etc/pam.d/passwd\n/etc/passwd-\n/etc/passwd.OLD\n/etc/passwd\n/etc/MYPASSWD\n/etc/security/opasswd\n\n\n\nFinding files by size\n\n\n$ find /usr/share/ -size +10M\n$ find /mostlybig -size -1M\n$ find /bigdata -size +500M -size -5G -exec du -sh {} \\;\n4.1G /bigdata/images/rhel6.img\n606M /bigdata/Fedora-16-i686-Live-Desktop.iso\n560M /bigdata/dance2.avi\n\n\n\nFinding files by user\n\n\n$ find /home -user chris -ls\n# find /home -user chris -or -user joe -ls\n# find /etc -group ntp -ls\n# find /var/spool -not -user root -ls\n\n\n\nFinding files by permission\n\n\n$ find /bin -perm 755 -ls\n$ find /home/chris/ -perm -222 -type d -ls\n$ find /myreadonly -perm +222 -type f\n$ find . -perm -002 -type f -ls\n\n\n\nFinding files by date and time\n\n\nchanged in past 10 minutes: \n$ find /etc/ -mmin -10\n\n\nchanged in the past three days: \n$ find /bin /usr/bin /sbin /usr/sbin -ctime -3\n\n\nhave not been accessed in more than 300 days: \n$ find /var/ftp /var/www -atime +300\n\n\nThe time options (-atime, -ctime, and -mtime)  based on the number of days\n\n\nThe min options (-amin, -cmin, and -mmin) do the same in minutes.\n\n\n$ find /etc -iname iptables -exec echo \"I found {}\" \\;\n\n\nI found /etc/bash_completion.d/iptables\nI found /etc/sysconfig/iptables\n\n\n\n$ find /usr/share -size +5M -exec du {} \\; | sort -nr\n\n\n$ find /var/allusers/ -user joe -ok mv {} /tmp/joe/ \\;\n\n\n-ok asks for confirmation\n\n\ngrep command\n\n\n$ grep desktop /etc/services\n$ grep -i desktop /etc/services\n\n\n\nTo search for lines that don\u2019t contain a selected text string, use the -v option.\n\n\n$ grep -vi tcp /etc/services\n\n\n\n-r : recursively\n\n\n-l : list filenames only\n\n\n$ grep -rli peerdns /usr/share/doc/\n\n\n$ ip addr show | grep inet",
            "title": "Linux"
        },
        {
            "location": "/linux/#linux-commands",
            "text": "The default prompt for regular user is  $  and for root user is  #  Ex:   [siva@siva-mint ~]$\n[siva@siva-mint ~]#  How to determine whether a given Linux is 32 bit or 64 bit?  $ uname -m  x86_64 ==> 64-bit kernel\ni686   ==> 32-bit kernel  Show distribution info:  $ uname -a  Linux localhost.localdomain 4.5.7-300.fc24.x86_64 #1 SMP Wed Jun 8 18:12:45 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux  Getting Help on commands:  $ man pwd\n$ info pwd\n$ help pwd  Go to home to home directory:  $ cd ~  How much time it took to execute the command:  $ time pwd  To find out where a particular command is taken from:  $ type bash\nbash is /bin/bash  type  command to check built-in or external command  $ type pwd\npwd is a shell builtin\n\n$ type bash\nbash is /bin/bash  To see the executed command history:  $ history  To execute 23rd command:  $ !23  To execute last command:  $ !!  To edit history command by number, opens in VI:  $ fc 12  To runs the most recent command that contains a particular string of characters:  $ !?string?  To show current user:  $ who am i\nsiva     pts/0        2016-08-22 10:26 (192.168.56.1)  $ grep siva /etc/passwd  siva:x:1000:1000:Siva:/home/siva:/bin/bash  $ hostname \n    siva-centos7  ls command:  $ ls -al\n$ ls --help\n$ ls --hide=Desktop  $ date  Mon Aug 22 10:33:50 IST 2016  $ date +'%d/%m/%y'  22/08/16  $ date +'%A, %B %d, %Y'  Tuesday, October 21, 2014  date --help  $ id  uid=1000(siva) gid=1000(siva) groups=1000(siva),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023  See which users logged into the system currently  $ who -uH\nNAME     LINE         TIME             IDLE          PID COMMENT\nsiva     :0           2016-08-22 10:11   ?          2575 (:0)\nsiva     tty2         2016-08-22 10:12 00:29        3443\nsiva     pts/0        2016-08-22 10:26   .          3935 (192.168.56.1)  List all aliases:  $ alias  If a command is not in your PATH variable:  $ locate chage",
            "title": "Linux Commands"
        },
        {
            "location": "/linux/#terminal-shorcuts",
            "text": "Alt+F => Word forward Go forward one word.\nAlt+B => Word backward Go backward one word.\nCtrl+A => Beginning of line Go to the beginning of the current line.\nCtrl+E => End of line Go to the end of the line.\nCtrl+L => Clear screen Clear screen and leave line at the top of the screen.\n\nAlt+U => Uppercase word Change the current word to uppercase.\nAlt+L => Lowercase word Change the current word to lowercase.\nAlt+C => Capitalize word Change the current word to an initial capital",
            "title": "Terminal shorcuts"
        },
        {
            "location": "/linux/#alias",
            "text": "alias sai='sudo apt-get install'\nunalias sai  For all users  /etc/profile\n/etc/bashrc  User specific config files  ~/.bash_profile\n~/.bashrc\n~/.bash_logout  To reload config file:  $ source ~/.bashrc",
            "title": "Alias"
        },
        {
            "location": "/linux/#touch-command",
            "text": "$ touch memo{1,2,3,4,5}\n$ ls\nmemo1 memo2 memo3 memo4 memo5\n\n$ touch {John,Bill,Sally}-{Breakfast,Lunch,Dinner}\n$ ls\nBill-Breakfast Bill-Lunch John-Dinner Sally-Breakfast Sally-Lunch\nBill-Dinner John-Breakfast John-Lunch Sally-Dinner\n\n$ rm -f {John,Bill,Sally}-{Breakfast,Lunch,Dinner}\n\n$ touch {a..f}{1..5}\n$ ls\na1 a3 a5 b2 b4 c1 c3 c5 d2 d4 e1 e3 e5 f2 f4\na2 a4 b1 b3 b5 c2 c4 d1 d3 d5 e2 e4 f1 f3 f5",
            "title": "touch command"
        },
        {
            "location": "/linux/#ls-command",
            "text": "$ ls -l\ntotal 4\n-rw-rw-r--. 1 joe joe 0 Dec 18 13:38 apple\nlrwxrwxrwx. 1 joe joe 5 Dec 18 13:46 pointer_to_apple -> apple\n-rwxr-xr-x. 1 joe joe 0 Dec 18 13:37 scriptx.sh  To show hidden and non-hidden files::  $ ls -a  To list all files by time most recently modified:  $ ls -at  To list files and append file-type indicators:  $ ls -F  $ ls --hide=g*  $ ls -ld $HOME/test/  To list all files and directories recursively from current directory down:  $ ls -R  To list files by size:  $ ls -S",
            "title": "ls command"
        },
        {
            "location": "/linux/#permissions",
            "text": "First character of permission:  hyphen (-) : a regular file\nd : a directory\nl ( lowercase L) : a symbolic link\nb (for a block device)\nc (for a character device)\ns (for a socket)\np (for a named pipe)\nx: an executable file (a script or binary file that runs as a command)  Changing permissions with chmod (numbers)  each permission (read, write, and execute) is assigned a number  r=4, w=2, and x=1  For example, to make permissions wide open for yourself as owner, \nyou would set the first number to 7 (4+2+1), and then you would give the group and others read-only\npermission by setting both the second and third numbers to 4 (4+0+0), so that the final\nnumber is 744.  # chmod 777 file -> rwxrwxrwx\n# chmod 755 file -> rwxr-xr-x\n# chmod 644 file -> rw-r--r-\n# chmod 000 file -> ---------  All files and directories below, and including, the myapps directory  $ chmod -R 755 $HOME/myapps  Changing permissions with chmod (letters)  user (u), group (g), other (o),all users (a).\nread (r), write (w), and execute (x)  Current : (rwxrwxrwx).  $ chmod a-w file -> r-xr-xr-x\n$ chmod o-x file -> rwxrwxrw-\n$ chmod go-rwx file -> rwx------  Current: (---------).  $ chmod u+rw files -> rw-------\n$ chmod a+x files -> --x--x--x\n$ chmod ug+rx files -> r-xr-x---\n$ chmod -R o-w $HOME/myapps  Changing file ownership  # chown joe /home/joe/memo.txt\n# ls -l /home/joe/memo.txt\n-rw-r--r--. 1 joe root 0 Dec 19 11:23 /home/joe/memo.txt  To change group as well  # chown joe:joe /home/joe/memo.txt\n# ls -l /home/joe/memo.txt\n-rw-r--r--. 1 joe joe 0 Dec 19 11:23 /home/joe/memo.txt\n\n# chown -R joe:joe /media/myusb  Moving, Copying, and Removing Files  $ mv abc def\n$ mv abc ~\n$ mv /home/joe/mymemos/ /home/joe/Documents/\n\n\n$ cp abc def\n$ cp abc ~\n$ cp -r /usr/share/doc/bash-completion* /tmp/a/\n$ cp -ra /usr/share/doc/bash-completion* /tmp/b/\n\n$ rm abc\n$ rm *\n$ rmdir /home/joe/nothing/\n$ rm -r /home/joe/bigdir/\n$ rm -rf /home/joe/hugedir/  The backslash causes any command to run unaliased.  \\rm bigdir",
            "title": "Permissions"
        },
        {
            "location": "/linux/#vim",
            "text": "0 (zero) \u2014 Moves the cursor to the beginning of the current line.\n$ Moves the cursor to the end of the current line.\n\nZZ \u2014 Saves the current changes to the file and exits from vi.\n:w \u2014 Saves the current file but doesn't exit from vi.\n:wq \u2014 Works the same as ZZ.\n:q \u2014 Quits the current file. This works only if you don\u2019t have any unsaved changes.\n:q! \u2014 Quits the current file and doesn\u2019t save the changes you just made to the file.  $ locate .bashrc  /etc/skel/.bashrc\n/home/cnegus/.bashrc  # locate .bashrc  /etc/skel/.bashrc\n/home/bill/.bashrc\n/home/joe/.bashrc\n/root/.bashrc",
            "title": "VIM"
        },
        {
            "location": "/linux/#find-command",
            "text": "# find /etc -name passwd  /etc/pam.d/passwd\n/etc/passwd  # find /etc -iname '*passwd*'  /etc/pam.d/passwd\n/etc/passwd-\n/etc/passwd.OLD\n/etc/passwd\n/etc/MYPASSWD\n/etc/security/opasswd  Finding files by size  $ find /usr/share/ -size +10M\n$ find /mostlybig -size -1M\n$ find /bigdata -size +500M -size -5G -exec du -sh {} \\;\n4.1G /bigdata/images/rhel6.img\n606M /bigdata/Fedora-16-i686-Live-Desktop.iso\n560M /bigdata/dance2.avi  Finding files by user  $ find /home -user chris -ls\n# find /home -user chris -or -user joe -ls\n# find /etc -group ntp -ls\n# find /var/spool -not -user root -ls  Finding files by permission  $ find /bin -perm 755 -ls\n$ find /home/chris/ -perm -222 -type d -ls\n$ find /myreadonly -perm +222 -type f\n$ find . -perm -002 -type f -ls  Finding files by date and time  changed in past 10 minutes:  $ find /etc/ -mmin -10  changed in the past three days:  $ find /bin /usr/bin /sbin /usr/sbin -ctime -3  have not been accessed in more than 300 days:  $ find /var/ftp /var/www -atime +300  The time options (-atime, -ctime, and -mtime)  based on the number of days  The min options (-amin, -cmin, and -mmin) do the same in minutes.  $ find /etc -iname iptables -exec echo \"I found {}\" \\;  I found /etc/bash_completion.d/iptables\nI found /etc/sysconfig/iptables  $ find /usr/share -size +5M -exec du {} \\; | sort -nr  $ find /var/allusers/ -user joe -ok mv {} /tmp/joe/ \\;  -ok asks for confirmation",
            "title": "find command"
        },
        {
            "location": "/linux/#grep-command",
            "text": "$ grep desktop /etc/services\n$ grep -i desktop /etc/services  To search for lines that don\u2019t contain a selected text string, use the -v option.  $ grep -vi tcp /etc/services  -r : recursively  -l : list filenames only  $ grep -rli peerdns /usr/share/doc/  $ ip addr show | grep inet",
            "title": "grep command"
        }
    ]
}